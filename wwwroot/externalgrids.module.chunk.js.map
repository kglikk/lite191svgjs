{"version":3,"sources":["./src/app/+data/externalgrids/externalgrids-routing.module.ts","./src/app/+data/externalgrids/externalgrids.component.css","./src/app/+data/externalgrids/externalgrids.component.html","./src/app/+data/externalgrids/externalgrids.component.ts","./src/app/+data/externalgrids/externalgrids.module.ts"],"names":[],"mappings":"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","file":"externalgrids.module.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ExternalGridsComponent } from \"app/+data/externalgrids/externalgrids.component\";\n\nconst routes: Routes = [{\n  path: '',\n  component: ExternalGridsComponent,\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ExternalGridsRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+data/externalgrids/externalgrids-routing.module.ts","module.exports = \"input[type=\\\"file\\\"] {\\n  display: none;\\n}\\n\\n.custom-file-upload {\\n /* border: 1px solid #ccc; */\\n  display: inline-block;\\n  padding: 6px 12px;\\n  cursor: pointer;\\n \\n}\\n\\n.custom-file-download {\\n    border: none;\\n    padding: 0;\\n    background: none;\\n  \\n}\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/+data/externalgrids/externalgrids.component.css\n// module id = ./src/app/+data/externalgrids/externalgrids.component.css\n// module chunks = externalgrids.module","module.exports = \"<!-- MAIN CONTENT -->\\n<div *ngIf=\\\"show;else otherContent\\\" id=\\\"content\\\">\\n\\n  <div class=\\\"row\\\">\\n    <sa-big-breadcrumbs [items]=\\\"['Data', 'External Grids']\\\" icon=\\\"table\\\" class=\\\"col-xs-12 col-sm-7 col-md-7 col-lg-4\\\"></sa-big-breadcrumbs>\\n    <!-- <sa-stats></sa-stats> -->\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class='col-sm-12' style=\\\"margin-top: 10px; margin-bottom: 10px\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=onAddRow()>Add External Grid</button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=removeSelected()>Delete selected</button>\\n      <!--\\n      <button type=\\\"button\\\" class=\\\"btn btn-basic\\\" (click)=importExcel()>Import Excel</button>\\n      -->\\n      <label for=\\\"file-upload\\\" class=\\\"custom-file-upload\\\">\\n        <i class=\\\"fa fa-cloud-upload\\\"></i> Import Data (Excel)\\n      </label>\\n      <input id=\\\"file-upload\\\" type=\\\"file\\\" (change)=\\\"onFileUpload($event)\\\" multiple=\\\"false\\\"/>\\n\\n      <!--\\n      <label for=\\\"file-download\\\" class=\\\"custom-file-download\\\">        \\n      </label>\\n    -->\\n      <button class=\\\"custom-file-download\\\" id=\\\"file-download\\\" (click)=\\\"export()\\\" > <i class=\\\"fa fa-cloud-download\\\"></i> Export Data (Excel) </button>\\n    <!--  <input type=\\\"file\\\" class=\\\"btn btn-basic\\\" (change)=\\\"onFileChange($event)\\\" multiple=\\\"false\\\" />-->\\n      <!--\\n      <import-file></import-file>\\n      -->\\n    </div>\\n  </div>\\n\\n  <!-- widget grid -->\\n  <sa-widgets-grid>\\n\\n\\n    <div class=\\\"row\\\">\\n      <article class=\\\"col-sm-12\\\">\\n\\n        <div class=\\\"table-responsive\\\" style=\\\"width: 100%; height: 500px;\\\">\\n          <ag-grid-angular #agGrid style=\\\"width: 100%;height: 100%;\\\" class=\\\"ag-fresh\\\" [gridOptions]=\\\"gridOptions\\\" [rowData]=\\\"rowData\\\"  [columnDefs]=\\\"columnDefs\\\" (gridReady)=\\\"onGridReady($event)\\\" >\\n              <!--[defaultColDef]=\\\"defaultColDef\\\" -->\\n          </ag-grid-angular>\\n        </div>\\n        <!-- \\n        <sa-widget [editbutton]=\\\"false\\\" color=\\\"darken\\\">\\n          <header>\\n            <span class=\\\"widget-icon\\\">\\n              <i class=\\\"fa fa-table\\\"></i>\\n            </span>\\n\\n            <h2>External Grids</h2>\\n          </header>\\n        \\n            <div class=\\\"widget-body no-padding\\\">\\n              <alert type=\\\"info\\\" class=\\\"no-margin fade in\\\" dismisser=\\\"\\\"> \\n                <i class=\\\"fa-fw fa fa-info\\\"></i>\\n                Adds zebra-striping to table row within <code>&lt;table&gt;</code> by adding the <code>.table-striped</code>\\n                with the base class\\n              </alert>\\n              \\n           \\n\\n               \\n\\n              </div>\\n\\n          \\n        </sa-widget>\\n        -->\\n      </article>\\n    </div>\\n\\n  </sa-widgets-grid>\\n</div>\\n\\n<ng-template #otherContent>Please open or create project in the Home tab first</ng-template>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/+data/externalgrids/externalgrids.component.html\n// module id = ./src/app/+data/externalgrids/externalgrids.component.html\n// module chunks = externalgrids.module","\nimport { Observable } from 'rxjs/Observable';\n//import { XLSX } from 'xlsx';\nimport * as XLSX from 'xlsx';\n//type AOA = any[][];\n\n\nimport { AuthService } from 'app/services/auth/auth.service';\nimport { ProjectService } from './../../services/project.service';\nimport { ShowDataService } from 'app/services/show-data.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FadeInTop } from \"../../shared/animations/fade-in-top.decorator\";\n\n\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { GridOptions } from \"ag-grid/main\";\n\nimport { ExternalGrids } from './externalgrids'\nimport { Buses } from './../buses/buses';\nimport { GetBusNoService } from '../../services/getbusno';\n\n\n@FadeInTop()\n@Component({\n  templateUrl: './externalgrids.component.html',\n  styleUrls: ['./externalgrids.component.css']\n\n})\nexport class ExternalGridsComponent implements OnInit {\n\n  private externalgrid: ExternalGrids[] = []\n  gridOptions: GridOptions\n  gridApi\n  gridColumnApi\n  rowData: Object //było any[] powinno byc object\n  show: boolean\n  name: string\n  ID: number\n  projectId: number\n  projectName: string\n  columnDefs: any[]\n\n  constructor(public http: HttpClient, public showData: ShowDataService, public projectService: ProjectService, public authService: AuthService, public getBusNoService: GetBusNoService) {\n\n    //pokazuj dane w zależności od tego czy projekt jest otwarty\n    this.showData.currentShow.subscribe(show => this.show = show);\n\n    //obserwuj ID projektu, który jest otwarty, żeby na tej podstawie wczytywać dane\n    this.projectService.currentProjectId.subscribe(projectId => this.projectId = projectId)\n    let projectIdInside = this.projectId;\n    this.projectService.currentProjectName.subscribe(projectName => this.projectName = projectName)\n\n\n    this.gridOptions = {\n      //gdy zmieniamy wartości w komórce, zmienia sie takze wartosc na serwerze \n      onCellValueChanged: function (event) {\n        let headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n        //jeśli zmieniona wartość jest ok     \n        console.log(\"onCellValueChanged\");\n        http.put('api/ExternalGrid/' + event.data.id, JSON.stringify({ ID: event.data.id, Name: event.data.name, NodeNo: event.data.nodeNo, NodeType: event.data.nodeType, VoltageAngle: event.data.voltageAngle, VoltageSetpoint: event.data.voltageSetpoint, ActivePower: event.data.activePower, ReactivePower: event.data.reactivePower, ProjectId: projectIdInside, svgXML: event.data.svgXML }), { headers }).subscribe();\n      },\n\n\n      onCellEditingStopped: () => {\n        console.log(\"onCellEditingStopped\");\n      },\n      onRowDataChanged: () => {\n        console.log(\"onRowDataChanged\");\n      },\n\n      singleClickEdit: false,\n      stopEditingWhenGridLosesFocus: true,\n\n      enableSorting: true,\n      // enableFilter: true,\n      enableColResize: true,\n      animateRows: true,\n      rowSelection: 'multiple',\n      //rowDragManaged: true,\n\n\n\n      defaultColDef: {\n        //enableCellChangeFlash: true,\n\n        // set every column width\n        // width: 150,\n        // make every column editable\n        editable: true,\n        // make every column use 'text' filter by default\n        filter: 'text'\n      },\n\n    }\n\n\n\n\n  }\n  ngOnInit() {\n\n    //wczytaj dane dotyczace externalgrid z bazy danych bazując na nazwie projektu\n    this.http.get('api/ExternalGrid/GetBasedOnProject/' + this.projectId).subscribe(\n      result => { this.rowData = result }\n    );\n\n\n    //tabela externalgrid zalezy takze od elementow Bus\n    this.http.get<Buses[]>('api/Bus/GetBasedOnProject/' + this.projectId).subscribe(\n      data => {\n        this.columnDefs =\n          [\n            {\n              headerName: 'Load flow data',\n              children: [\n                { headerName: \"Name\", field: \"name\", },\n                {\n                  headerName: \"Bus no.\", field: \"nodeNo\", cellEditor: 'agSelectCellEditor',\n                  //umiesc w tabeli numery wezłów bus\n                  cellEditorParams: function () {\n                 \n                    var wartosci = []\n                    data.forEach(function (value) {\n                      wartosci.push(value.nodeNo)\n                    })\n                    return {\n                      values: wartosci,\n                    };\n                  }\n                },\n                {\n                  headerName: \"Type of node\", field: \"nodeType\", cellEditor: 'agSelectCellEditor',\n                  cellEditorParams: {\n                    values: [\n                      \"SL\",\n                      \"PV\",\n                      \"PQ\"\n                    ]\n                  }\n                },\n\n                {\n                  headerName: \"Voltage angle [deg]\", field: \"voltageAngle\", type: \"numericColumn\",\n                  valueFormatter: this.numberValueFormatter,\n                  valueSetter: this.numberValueSetter\n                },\n                {\n                  headerName: \"Voltage setpoint [p.u.]\", field: \"voltageSetpoint\", type: \"numericColumn\",\n                  valueFormatter: this.numberValueFormatter,\n                  valueSetter: this.numberValueSetter\n                },\n                {\n                  headerName: \"Active power [MW]\", field: \"activePower\", type: \"numericColumn\",\n                  valueFormatter: this.numberValueFormatter,\n                  valueSetter: this.numberValueSetter\n                },\n                {\n                  headerName: \"Reactive power [MVAr]\", field: \"reactivePower\", type: \"numericColumn\",\n                  valueFormatter: this.numberValueFormatter,\n                  valueSetter: this.numberValueSetter\n                }\n              ]\n            }\n          ];\n\n\n      }\n    )\n\n\n  }\n\n\n\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n\n    params.api.sizeColumnsToFit();\n  }\n\n\n\n  getExternalGrids(): Observable<ExternalGrids[]> {\n\n    return this.http.get<ExternalGrids[]>('api/ExternalGrid/GetBasedOnProject/' + this.projectId)\n\n  }\n\n\n\n  getBuses(): Observable<Buses[]> {\n    //wczytaj dane dotyczace szyn\n    return this.http.get<Buses[]>('api/Bus/GetBasedOnProject/' + this.projectId)\n\n  }\n\n  //sprawdzanie czy wprowadzona liczba do tabeli jest liczbą\n\n  numberValueFormatter(params) {\n    /*\n    if (isNaN(Number(params.value))) {\n      return \"\";\n    } else {\n      return params.value;\n    }\n    */\n  }\n  //ustawienie wartości jeśli jest liczbą\n  numberValueSetter(params) {\n    if (isNaN(parseFloat(params.newValue)) || !isFinite(params.newValue)) {\n      alert(\"It must be a number. Please use dot '.'\");\n      return false; // don't set invalid numbers!\n    }\n\n    if (params.colDef.field == \"voltageAngle\") {\n      params.data.voltageAngle = params.newValue;\n    }\n    if (params.colDef.field == \"voltageSetpoint\") {\n      if (params.newValue < 0 || params.newValue > 1) {\n        alert(\"Should be between 0-1\");\n        return false; // don't set invalid numbers!\n\n      } else {\n        params.data.voltageSetpoint = params.newValue;\n      }\n\n    }\n    if (params.colDef.field == \"activePower\") {\n      params.data.activePower = params.newValue;\n    }\n    if (params.colDef.field == \"reactivePower\") {\n      params.data.reactivePower = params.newValue;\n    }\n    return true;\n    //w bazie danych SQL dane są aktualizowane w onCellValueChanged\n  }\n\n  //zaktualizowanie tabeli\n  printResult(res) {\n    console.log('---------------------------------------')\n    if (res.add) {\n      res.add.forEach(function (rowNode) {\n\n        console.log('Added Row Node', rowNode);\n      });\n    }\n    if (res.remove) {\n      res.remove.forEach(function (rowNode) {\n        console.log('Removed Row Node', rowNode);\n      });\n    }\n    if (res.update) {\n      res.update.forEach(function (rowNode) {\n        console.log('Updated Row Node', rowNode);\n      });\n    }\n  }\n\n\n  removeSelected() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n\n    if (window.confirm('Are you sure you want to delete?')) {\n      //front-end\n      var selectedData = this.gridOptions.api.getSelectedRows();\n\n      let rowIdArray: number[] = [];\n      this.gridOptions.api.forEachNode(function (node) {\n       \n        if (node.isSelected()) {\n          rowIdArray.push(node.data.id);\n        }\n      });\n\n      var res = this.gridOptions.api.updateRowData({ remove: selectedData });\n      this.printResult(res);\n      //back-end\n\n\n      for (var rowId = 0; rowId < rowIdArray.length; rowId++) {\n        this.http.delete('api/ExternalGrid/' + rowIdArray[rowId], { headers }).subscribe();\n      }\n    } else { }\n  }\n\n  onAddRow() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n\n    var svgXML = '<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"schemat\" attr=\"unselected\" class=\"noshift\" x=\"0\" y=\"0\" style=\"overflow: visible;\"><path id=\"SvgjsPath1017\" d=\"M0,0,20,0,20,20,0,20,0,0.2,19.5,10,0,20M20,20,0.5,10,20,0\" style=\"stroke: rgb(0, 0, 0); fill: rgb(255, 255, 255); cursor: pointer; stroke-width: 0.5;\"/><circle id=\"SvgjsCircle1018\" r=\"2\" cx=\"10\" cy=\"18\" stroke=\"#000000\" stroke-width=\"0.5\" class=\"free\"/></svg>'\n\n    var newItem = {\n      //id: 0,\n      name: \"External Grid\",\n      nodeNo: 0,\n      nodeType: \"SL\",\n      voltageAngle: 0,\n      voltageSetpoint: 0,\n      activePower: 0,\n      reactivePower: 0,\n      //projectId: 2\n    };\n\n \n    var stringifiedNewItem = JSON.stringify({\n      ID: 0,\n      Name: newItem.name,\n      NodeNo: newItem.nodeNo,\n      NodeType: newItem.nodeType,\n      VoltageAngle: newItem.voltageAngle,\n      VoltageSetpoint: newItem.voltageSetpoint,\n      ActivePower: newItem.activePower,\n      ReactivePower: newItem.reactivePower,\n      ProjectId: this.projectId,\n      svgXML: svgXML\n     \n    })\n\n    this.http.post('api/ExternalGrid', stringifiedNewItem, { headers })\n      .subscribe(() => {\n\n          //zapisz do tabeli front end\n          var res = this.gridOptions.api.updateRowData({ add: [newItem] });\n          this.printResult(res);\n\n      })\n\n    /*\n    this.http.post('api/ExternalGrid', stringifiedNewItem, { headers })\n      .subscribe(\n        (data) => {  //nic nie robimy \n        },\n        err => console.error(err),\n        //po wysłaniu elementu do bazy danych\n        () => {   \n          // po operacji post ustawiany jest specyficzny ID w bazie SQL, aby dany wiersz w front-end miał taki sam ID, musze sciagnac te dane do frontendu\n          this.getExternalGrid().subscribe(\n            results => { \n              //zapisz do front end\n              this.rowData = results\n\n              //id ostatniego elementu w bazie danych              \n              var lastElement = results[results.length-1]\n\n              //ustawienie w bazie danych wartosci \n              var svgXML = '<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"'+lastElement.id+'\" attr=\"unselected\" class=\"noshift\" x=\"0\" y=\"0\" style=\"overflow: visible;\"><path id=\"SvgjsPath1017\" d=\"M0,0,20,0,20,20,0,20,0,0.2,19.5,10,0,20M20,20,0.5,10,20,0\" style=\"stroke: rgb(0, 0, 0); fill: rgb(255, 255, 255); cursor: pointer; stroke-width: 0.5;\"/><circle id=\"SvgjsCircle1018\" r=\"2\" cx=\"10\" cy=\"18\" stroke=\"#000000\" stroke-width=\"0.5\" class=\"free\"/></svg>'\n              this.http.put('api/ExternalGrid/' + lastElement.id, JSON.stringify({ ID: lastElement.id, Name: lastElement.name, NodeNo: lastElement.nodeNo, NodeType: lastElement.nodeType, VoltageAngle: lastElement.voltageAngle, VoltageSetpoint: lastElement.voltageSetpoint, ActivePower: lastElement.activePower, ReactivePower: lastElement.reactivePower, ProjectId: lastElement.projectId, svgXML: svgXML }), { headers }).subscribe();\n            },\n          );\n\n          //zapisz do front end\n          var res = this.gridOptions.api.updateRowData({ add: [newItem] });\n          this.printResult(res);\n        }\n    ); */\n\n    /*\n    this.http.post('api/ExternalGrid',\n      JSON.stringify({\n        ID: 0, Name: newItem.name,\n        NodeNo: newItem.nodeNo,\n        NodeType: newItem.nodeType,\n        VoltageAngle: newItem.voltageAngle,\n        VoltageSetpoint: newItem.voltageSetpoint,\n        ActivePower: newItem.activePower,\n        ReactivePower: newItem.reactivePower,\n        ProjectId: this.projectId,\n        svgXML: svgXML\n      }), { headers }\n    )\n    .subscribe((data: Object) => {\n        //Czekamy na wykonanie sie POST, zeby zrobic GET i WPISAC dane do tabeli we front end\n        // po operacji post ustawiany jest specyficzny ID w bazie SQL, aby dany wiersz w front-end miał taki sam ID, musze sciagnac te dane do frontendu\n        this.http.get('api/ExternalGrid/GetBasedOnProject/' + this.projectId).subscribe(\n          result => { this.rowData = result; },\n        );\n\n        var res = this.gridOptions.api.updateRowData({ add: [newItem] });\n        this.printResult(res);\n    });\n    */\n\n\n  }\n\n  getExternalGrid(): Observable<ExternalGrids[]> {    \n    return this.http.get<ExternalGrids[]>('api/ExternalGrid/GetBasedOnProject/' + this.projectId)\n  }\n\n\n\n\n\n\n  // pull out the values we're after, converting it into an array of rowData\n  populateGrid(workbook) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n\n    // our data is in the first sheet\n    var firstSheetName = workbook.SheetNames[0];\n    var worksheet = workbook.Sheets[firstSheetName];\n\n    // we expect the following columns to be present\n    var columns = {\n      'A': 'name',\n      'B': 'nodeType',\n      'C': 'nodeNo',\n      'D': 'voltageAngle',\n      'E': 'voltageSetpoint',\n      'F': 'activePower',\n      'G': 'reactivePower'\n    };\n\n    var rowData = [];\n\n    // start at the 2nd row - the first row are the headers\n    var rowIndex = 2;\n\n    // iterate over the worksheet pulling out the columns we're expecting\n    while (worksheet['A' + rowIndex]) {\n      var row = {};\n      Object.keys(columns).forEach(function (column) {\n        row[columns[column]] = worksheet[column + rowIndex].w;\n      });\n      \n\n      rowData.push(row);\n      //połącz dwa JSONY, żeby dodać numer projektu\n      var resultRow = {\n        ...{\n          ID: 0\n        },\n        ...row,\n        ... {\n          //id: 0,         \n          projectId: this.projectId\n        }\n      };\n\n\n      /*\n      this.http.post('api/ExternalGrid', resultRow, { headers }).subscribe();\n      var res = this.gridOptions.api.updateRowData({ add: [resultRow] });\n      this.printResult(res);\n      */\n      this.http.post('api/ExternalGrid', resultRow, { headers }).subscribe((data: Object) => {\n        //Czekamy na wykonanie sie POST, zeby zrobic GET i WPISAC dane do tabeli we front end\n\n        // po operacji post ustawiany jest specyficzny ID w bazie SQL, aby dany wiersz w front-end miał taki sam ID, musze sciagnac te dane do frontendu\n        this.http.get('api/ExternalGrid/GetBasedOnProject/' + this.projectId).subscribe(\n          result => { this.rowData = result; },\n        );\n\n        var res = this.gridOptions.api.updateRowData({ add: [row] });\n        this.printResult(res);\n      });\n      rowIndex++;\n    }\n  }\n\n  wopts: XLSX.WritingOptions = { bookType: 'xlsx', type: 'array' };\n\n  onFileUpload(evt: any) {\n    /* wire up file reader */\n    const target: DataTransfer = <DataTransfer>(evt.target);\n    if (target.files.length !== 1) throw new Error('Cannot use multiple files');\n    const reader: FileReader = new FileReader();\n    reader.onload = (e: any) => {\n      /* read workbook */\n      const bstr: string = e.target.result;\n      const wb: XLSX.WorkBook = XLSX.read(bstr, { type: 'binary' });\n      this.populateGrid(wb);\n    };\n    reader.readAsBinaryString(target.files[0]);\n  }\n\n  export(): void {\n    //zbierz dane z serwera i zapisz do pliku xlsx\n    this.http.get('api/ExternalGrid/GetBasedOnProjectWithoutColumns/' + this.projectId).subscribe((data: any) => {\n      // generate worksheet\n      const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data);\n\n      // generate workbook and add the worksheet \n      const wb: XLSX.WorkBook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n      /* save to file */\n      //XLSX.writeFile(wb, 'externalgrid_'+this.projectName+'.xlsx');\n      XLSX.writeFile(wb, 'externalgrid_' + this.projectName + '.xlsx');\n    });\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+data/externalgrids/externalgrids.component.ts","\nimport { NgModule, Injectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { ExternalGridsRoutingModule } from './externalgrids-routing.module';\nimport { ExternalGridsComponent } from \"app/+data/externalgrids/externalgrids.component\";\nimport {SmartadminModule} from \"app/shared/smartadmin.module\";\n\n\nimport {AgGridModule} from 'ag-grid-angular/main';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    SmartadminModule,\n    AgGridModule.withComponents([]),\n    ExternalGridsRoutingModule\n    \n  ],\n  declarations: [\n    ExternalGridsComponent\n  ],\n  providers: [\n    { provide: 'BASE_URL', useFactory: getBaseUrl }\n  ] \n})\nexport class ExternalGridsModule { }\n\nexport function getBaseUrl() {\n  return document.getElementsByTagName('base')[0].href;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+data/externalgrids/externalgrids.module.ts"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["./src/app/+data/twophasetransformers/twophasetransformers-routing.module.ts","./src/app/+data/twophasetransformers/twophasetransformers.component.css","./src/app/+data/twophasetransformers/twophasetransformers.component.html","./src/app/+data/twophasetransformers/twophasetransformers.component.ts","./src/app/+data/twophasetransformers/twophasetransformers.module.ts"],"names":[],"mappings":"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","file":"twophasetransformers.module.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TwoPhaseTransformersComponent } from \"app/+data/twophasetransformers/twophasetransformers.component\";\n\nconst routes: Routes = [{\n  path: '',\n  component: TwoPhaseTransformersComponent,\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TwoPhaseTransformersRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+data/twophasetransformers/twophasetransformers-routing.module.ts","module.exports = \"input[type=\\\"file\\\"] {\\n  display: none;\\n}\\n\\n.custom-file-upload {\\n /* border: 1px solid #ccc; */\\n  display: inline-block;\\n  padding: 6px 12px;\\n  cursor: pointer;\\n \\n}\\n\\n.custom-file-download {\\n    border: none;\\n    padding: 0;\\n    background: none;\\n  \\n}\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/+data/twophasetransformers/twophasetransformers.component.css\n// module id = ./src/app/+data/twophasetransformers/twophasetransformers.component.css\n// module chunks = twophasetransformers.module","module.exports = \"<!-- MAIN CONTENT -->\\n<div *ngIf=\\\"show;else otherContent\\\" id=\\\"content\\\">\\n\\n  <div class=\\\"row\\\">\\n    <sa-big-breadcrumbs [items]=\\\"['Data', 'Two-phase transformers']\\\" icon=\\\"table\\\" class=\\\"col-xs-12 col-sm-7 col-md-7 col-lg-4\\\"></sa-big-breadcrumbs>\\n    <!-- <sa-stats></sa-stats> -->\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class='col-sm-12' style=\\\"margin-top: 10px; margin-bottom: 10px\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=onAddRow()>Add Transformer</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=removeSelected()>Delete selected</button>\\n        <label for=\\\"file-upload\\\" class=\\\"custom-file-upload\\\">\\n          <i class=\\\"fa fa-cloud-upload\\\"></i> Import Data (Excel)\\n        </label>\\n        <input id=\\\"file-upload\\\" type=\\\"file\\\" (change)=\\\"onFileUpload($event)\\\" multiple=\\\"false\\\"/>\\n        <button class=\\\"custom-file-download\\\" id=\\\"file-download\\\" (click)=\\\"export()\\\" > <i class=\\\"fa fa-cloud-download\\\"></i> Export Data (Excel) </button>\\n    \\n      </div>\\n  </div>\\n  <!-- widget grid -->\\n  <sa-widgets-grid>\\n\\n\\n    <div class=\\\"row\\\">\\n      <article class=\\\"col-sm-12\\\">\\n\\n          <div class=\\\"table-responsive\\\" style=\\\"width: 100%; height: 500px;\\\">\\n              <ag-grid-angular #agGrid style=\\\"width: 100%;height: 100%;\\\" class=\\\"ag-fresh\\\" [gridOptions]=\\\"gridOptions\\\" [rowData]=\\\"rowData\\\" [columnDefs]=\\\"columnDefs\\\" (gridReady)=\\\"onGridReady($event)\\\"> \\n                <!--  [columnDefs]=\\\"columnDefs\\\" [defaultColDef]=\\\"defaultColDef\\\" -->\\n          </ag-grid-angular>\\n          </div>\\n\\n          <!--\\n        <sa-widget [editbutton]=\\\"false\\\" color=\\\"darken\\\">\\n          <header>\\n            <span class=\\\"widget-icon\\\">\\n              <i class=\\\"fa fa-table\\\"></i>\\n            </span>\\n\\n            <h2>Two-phase transformers  </h2>\\n          </header>\\n          <div>\\n            <div class=\\\"widget-body no-padding\\\">\\n              <alert type=\\\"info\\\" class=\\\"no-margin fade in\\\" dismisser=\\\"\\\"> \\n                <i class=\\\"fa-fw fa fa-info\\\"></i>\\n                Adds zebra-striping to table row within <code>&lt;table&gt;</code> by adding the <code>.table-striped</code>\\n                with the base class\\n              </alert>\\n              -\\n            \\n\\n            </div>\\n          </div>\\n        </sa-widget>\\n      -->\\n\\n      </article>\\n\\n\\n    </div>\\n  \\n  </sa-widgets-grid>\\n</div>\\n\\n\\n<ng-template #otherContent>Please open or create project in the Home tab first</ng-template>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/+data/twophasetransformers/twophasetransformers.component.html\n// module id = ./src/app/+data/twophasetransformers/twophasetransformers.component.html\n// module chunks = twophasetransformers.module","import { Buses } from './../buses/buses';\nimport * as XLSX from 'xlsx';\n\nimport { ProjectService } from './../../services/project.service';\nimport { ShowDataService } from './../../services/show-data.service';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { GridOptions } from \"ag-grid/main\";\n\nimport { TwoPhaseTransformers } from './twophasetransformers'\n\n@Component({\n    templateUrl: './twophasetransformers.component.html',\n    styleUrls: ['./twophasetransformers.component.css']\n})\n\n\nexport class TwoPhaseTransformersComponent implements OnInit {\n    private twophasetransformer: TwoPhaseTransformers[] = []\n    gridOptions: GridOptions\n    gridApi\n    gridColumnApi\n    rowData: Object //było any[] \n    show: boolean\n    name: string\n    projectId: number\n    projectName: string\n    columnDefs: any[]\n\n    constructor(public http: HttpClient, public showData: ShowDataService, public projectService: ProjectService) {\n\n        //czy pokazywać dane czy nie w zależności od tego czy projekt jest otwarty\n        this.showData.currentShow.subscribe(show => this.show = show);\n\n        //obserwuj ID projektu, który jest otwarty, żeby na tej podstawie wczytywać dane\n        this.projectService.currentProjectId.subscribe(projectId => this.projectId = projectId)\n        let projectIdInside = this.projectId;\n\n        this.projectService.currentProjectName.subscribe(projectName => this.projectName = projectName)\n\n\n \n\n        this.gridOptions = {\n            onCellValueChanged: function (event) {\n                //jeśli zmieniona wartość jest ok \n                console.log(\"onCellValueChanged\");\n                let headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n\n                http.put('api/TwoPhaseTransformer/' + event.data.id, JSON.stringify({ ID: event.data.id, Name: event.data.name, HVNodeNo: event.data.hvNodeNo, LVNodeNo: event.data.lvNodeNo, HVVoltageRated: event.data.hvVoltageRated, LVVoltageRated: event.data.lvVoltageRated, ApparentPowerRated: event.data.apparentPowerRated, LoadLossesRated: event.data.loadLossesRated, ShortCircuitVoltage: event.data.shortCircuitVoltage, ProjectId: projectIdInside }), { headers }).subscribe();\n            },\n            onCellEditingStopped: () => {\n                console.log(\"onCellEditingStopped\");\n            },\n            onRowDataChanged: () => {\n                console.log(\"onRowDataChanged\");\n            },\n            singleClickEdit: false,\n            stopEditingWhenGridLosesFocus: true,\n\n            enableSorting: true,\n            enableFilter: true,\n            enableColResize: true,\n            animateRows: true,\n            rowSelection: 'multiple',\n\n            defaultColDef: {\n                //enableCellChangeFlash: true,\n                // set every column width\n                // width: 150,\n                // make every column editable\n                editable: true,\n                // make every column use 'text' filter by default\n                filter: 'text'\n            },\n        }\n\n\n    }\n\n    ngOnInit() {\n\n        //wczytaj dane z bazy danych\n        this.http.get('api/TwoPhaseTransformer/GetBasedOnProject/' + this.projectId).subscribe(\n            result => { this.rowData = result }\n        );\n\n\n        //tabela zalezy takze od elementow Bus\n        this.http.get<Buses[]>('api/Bus/GetBasedOnProject/' + this.projectId).subscribe(\n            data => {\n\n                this.columnDefs = [\n                    // put the three columns into a group\n                    {\n                        headerName: 'Load flow data',\n                        children: [\n                            { headerName: \"Name\", field: \"name\" },\n                            {\n                                headerName: \"High voltage bus no.\", field: \"hvNodeNo\",\n                                cellEditor: 'agSelectCellEditor',\n                                //umiesc w tabeli numery wezłów bus\n                                cellEditorParams: function () {\n                                    console.log(Object.keys(data).length)\n                                    var wartosci = []\n                                    data.forEach(function (value) {\n                                        wartosci.push(value.nodeNo)\n                                    })\n                                    return {\n                                        values: wartosci,\n                                    };\n                                }\n                            },\n                            {\n                                headerName: \"Low voltage bus no.\", field: \"lvNodeNo\",\n                                cellEditor: 'agSelectCellEditor',\n                                //umiesc w tabeli numery wezłów bus\n                                cellEditorParams: function () {\n                                    console.log(Object.keys(data).length)\n                                    var wartosci = []\n                                    data.forEach(function (value) {\n                                        wartosci.push(value.nodeNo)\n                                    })\n                                    return {\n                                        values: wartosci,\n                                    };\n                                }\n                            },\n                            {\n                                headerName: \"Rated high voltage [kV]\", field: \"hvVoltageRated\", type: \"numericColumn\",\n                                valueFormatter: this.numberValueFormatter,\n                                valueSetter: this.numberValueSetter\n                            },\n                            {\n                                headerName: \"Rated low voltage [kV]\", field: \"lvVoltageRated\", type: \"numericColumn\",\n                                valueFormatter: this.numberValueFormatter,\n                                valueSetter: this.numberValueSetter\n                            },\n                            {\n                                headerName: \"Rated apparent power [MVA]\", field: \"apparentPowerRated\", type: \"numericColumn\",\n                                valueFormatter: this.numberValueFormatter,\n                                valueSetter: this.numberValueSetter\n                            },\n                            {\n                                headerName: \"Rated load losses [kW]\", field: \"loadLossesRated\", type: \"numericColumn\",\n                                valueFormatter: this.numberValueFormatter,\n                                valueSetter: this.numberValueSetter\n                            },\n                            {\n                                headerName: \"Short circuit voltage [%]\", field: \"shortCircuitVoltage\", type: \"numericColumn\",\n                                valueFormatter: this.numberValueFormatter,\n                                valueSetter: this.numberValueSetter\n                            }\n                        ]\n                    }\n                ];\n            })\n\n\n\n\n\n\n\n\n\n\n\n    }\n\n    onGridReady(params) {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n\n        params.api.sizeColumnsToFit();\n    }\n\n    //sprawdzanie czy wprowadzona liczba do tabeli jest liczbą\n    numberValueFormatter(params) {\n        /*\n        if (isNaN(Number(params.value))) {\n            return \"\";\n        } else {\n            return params.value;\n        } */\n    }\n    //ustawienie wartości jeśli jest liczbą\n    numberValueSetter(params) {\n        if (isNaN(parseFloat(params.newValue)) || !isFinite(params.newValue)) {\n            alert(\"It must be a number. Please use dot '.'\");\n            return false; // don't set invalid numbers!\n        }\n\n        if (params.colDef.field == \"hvNodeNo\") {\n\n            if (params.newValue < 0) {\n                alert(\"Can't be minus value\");\n                return false; // don't set invalid numbers!                \n            } else {\n                if (!Number.isInteger(Number(params.newValue))) {\n                    alert(\"Should be integer value\");\n                    return false; // don't set invalid numbers!                \n                } else {\n                    params.data.hvNodeNo = params.newValue;\n                }\n            }\n        }\n        if (params.colDef.field == \"lvNodeNo\") {\n            if (params.newValue < 0) {\n                alert(\"Can't be minus value\");\n                return false; // don't set invalid numbers!                \n            } else {\n                if (!Number.isInteger(Number(params.newValue))) {\n                    alert(\"Should be integer value\");\n                    return false; // don't set invalid numbers!                \n                } else {\n                    params.data.lvNodeNo = params.newValue;\n                }\n            }\n        }\n        if (params.colDef.field == \"hvVoltageRated\") {\n            if (params.newValue < 0) {\n                alert(\"Should be greater than 0\");\n                return false; // don't set invalid numbers!                \n            } else {\n                params.data.hvVoltageRated = params.newValue;\n            }\n\n        }\n        if (params.colDef.field == \"lvVoltageRated\") {\n            if (params.newValue < 0) {\n                alert(\"Should be greater than 0\");\n                return false; // don't set invalid numbers!                \n            } else {\n                params.data.lvVoltageRated = params.newValue;\n            }\n\n        }\n        if (params.colDef.field == \"apparentPowerRated\") {\n            if (params.newValue < 0) {\n                alert(\"Should be greater than 0\");\n                return false; // don't set invalid numbers!                \n            } else {\n                params.data.apparentPowerRated = params.newValue;\n            }\n\n        }\n        if (params.colDef.field == \"loadLossesRated\") {\n            if (params.newValue < 0) {\n                alert(\"Should be greater than 0\");\n                return false; // don't set invalid numbers!                \n            } else {\n                params.data.loadLossesRated = params.newValue;\n            }\n\n        }\n        if (params.colDef.field == \"shortCircuitVoltage\") {\n            if (params.newValue < 0) {\n                alert(\"Should be greater than 0\");\n                return false; // don't set invalid numbers!                \n            } else {\n                params.data.shortCircuitVoltage = params.newValue;\n            }\n\n        }\n        return true;\n        //w bazie danych SQL dane są aktualizowane w onCellValueChanged  \n    }\n\n    //zaktualizowanie tabeli\n    printResult(res) {\n        console.log('---------------------------------------')\n        if (res.add) {\n            res.add.forEach(function (rowNode) {\n\n                console.log('Added Row Node', rowNode);\n            });\n        }\n        if (res.remove) {\n            res.remove.forEach(function (rowNode) {\n                console.log('Removed Row Node', rowNode);\n            });\n        }\n        if (res.update) {\n            res.update.forEach(function (rowNode) {\n                console.log('Updated Row Node', rowNode);\n            });\n        }\n    }\n\n    removeSelected() {\n        if (window.confirm('Are you sure you want to delete?')) {\n            //front-end\n            var selectedData = this.gridOptions.api.getSelectedRows();\n\n            let rowIdArray: number[] = [];\n            this.gridOptions.api.forEachNode(function (node) {\n\n                if (node.isSelected()) {\n                    rowIdArray.push(node.data.id);\n                }\n            });\n            var res = this.gridOptions.api.updateRowData({ remove: selectedData });\n            this.printResult(res);\n            //back-end\n            let headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n\n            for (var rowId = 0; rowId < rowIdArray.length; rowId++) {\n                this.http.delete('api/TwoPhaseTransformer/' + rowIdArray[rowId], { headers }).subscribe();\n            }\n        } else { }\n    }\n\n    onAddRow() {\n        var newItem = {\n            //id: 0,\n            name: \"Two phase transformer\",\n            hvNodeNo: 0,\n            lvNodeNo: 0,\n            hvVoltageRated: 0,\n            lvVoltageRated: 0,\n            apparentPowerRated: 0,\n            loadLossesRated: 0,\n            shortCircuitVoltage: 0,\n        };\n        let headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n\n        this.http.post('api/TwoPhaseTransformer', JSON.stringify({ ID: 0, Name: newItem.name, HVNodeNo: newItem.hvNodeNo, LVNodeNo: newItem.lvNodeNo, HVVoltageRated: newItem.hvVoltageRated, LVVoltageRated: newItem.lvVoltageRated, ApparentPowerRated: newItem.apparentPowerRated, LoadLossesRated: newItem.loadLossesRated, ShortCircuitVoltage: newItem.shortCircuitVoltage, ProjectId: this.projectId }), { headers }).subscribe((data: Object) => {\n            //Czekamy na wykonanie sie POST, zeby zrobic GET i WPISAC dane do tabeli we front end\n            // po operacji post ustawiany jest specyficzny ID w bazie SQL, aby dany wiersz w fron-end miał taki sam ID, musze sciagnac te dane do frontendu    \n            this.http.get('api/TwoPhaseTransformer/GetBasedOnProject/' + this.projectId).subscribe(\n                result => { this.rowData = result },\n            );\n            var res = this.gridOptions.api.updateRowData({ add: [newItem] });\n            this.printResult(res);\n        },\n        );\n    }\n\n\n    // pull out the values we're after, converting it into an array of rowData\n    populateGrid(workbook) {\n        let headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n\n        // our data is in the first sheet\n        var firstSheetName = workbook.SheetNames[0];\n        var worksheet = workbook.Sheets[firstSheetName];\n\n        // we expect the following columns to be present\n        var columns = {\n            'A': 'name',\n            'B': 'hvNodeNo',\n            'C': 'lvNodeNo',\n            'D': 'hvVoltageRated',\n            'E': 'lvVoltageRated',\n            'F': 'apparentPowerRated',\n            'G': 'loadLossesRated',\n            'H': 'shortCircuitVoltage',\n        };\n\n        var rowData = [];\n\n        // start at the 2nd row - the first row are the headers\n        var rowIndex = 2;\n\n        // iterate over the worksheet pulling out the columns we're expecting\n        while (worksheet['A' + rowIndex]) {\n            var row = {};\n            Object.keys(columns).forEach(function (column) {\n                row[columns[column]] = worksheet[column + rowIndex].w;\n            });\n            // console.log(\"JSON.stringify(row\" + JSON.stringify(row)); \n\n            rowData.push(row);\n            //połącz dwa JSONY, żeby dodać numer projektu\n            var resultRow = {\n                ...{\n                    ID: 0\n                },\n                ...row,\n                ... {\n                    //id: 0,         \n                    projectId: this.projectId\n                }\n            };\n\n            this.http.post('api/TwoPhaseTransformer', resultRow, { headers }).subscribe((data: Object) => {\n                //Czekamy na wykonanie sie POST, zeby zrobic GET i WPISAC dane do tabeli we front end\n\n                // po operacji post ustawiany jest specyficzny ID w bazie SQL, aby dany wiersz w front-end miał taki sam ID, musze sciagnac te dane do frontendu\n                this.http.get('api/TwoPhaseTransformer/GetBasedOnProject/' + this.projectId).subscribe(\n                    result => { this.rowData = result; },\n                );\n\n                var res = this.gridOptions.api.updateRowData({ add: [row] });\n                this.printResult(res);\n            });\n            rowIndex++;\n        }\n    }\n\n    wopts: XLSX.WritingOptions = { bookType: 'xlsx', type: 'array' };\n\n    onFileUpload(evt: any) {\n        /* wire up file reader */\n        const target: DataTransfer = <DataTransfer>(evt.target);\n        if (target.files.length !== 1) throw new Error('Cannot use multiple files');\n        const reader: FileReader = new FileReader();\n        reader.onload = (e: any) => {\n            /* read workbook */\n            const bstr: string = e.target.result;\n            const wb: XLSX.WorkBook = XLSX.read(bstr, { type: 'binary' });\n            this.populateGrid(wb);\n        };\n        reader.readAsBinaryString(target.files[0]);\n    }\n\n    export(): void {\n        //zbierz dane z serwera i zapisz do pliku xlsx\n        this.http.get('api/TwoPhaseTransformer/GetBasedOnProjectWithoutColumns/' + this.projectId).subscribe((data: any) => {\n\n            // generate worksheet\n            const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data);\n\n            // generate workbook and add the worksheet \n            const wb: XLSX.WorkBook = XLSX.utils.book_new();\n            XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n            /* save to file */\n            //XLSX.writeFile(wb, 'externalgrid_'+this.projectName+'.xlsx');\n            XLSX.writeFile(wb, 'twophasetransformer_' + this.projectName + '.xlsx');\n        });\n    }\n\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+data/twophasetransformers/twophasetransformers.component.ts","import { NgModule, Injectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { TwoPhaseTransformersRoutingModule } from './twophasetransformers-routing.module';\nimport { TwoPhaseTransformersComponent } from \"app/+data/twophasetransformers/twophasetransformers.component\";\nimport {SmartadminModule} from \"app/shared/smartadmin.module\";\n\nimport {AgGridModule} from 'ag-grid-angular/main';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    SmartadminModule,\n    AgGridModule.withComponents([]),\n    TwoPhaseTransformersRoutingModule\n    \n  ],\n  declarations: [\n    TwoPhaseTransformersComponent\n  ],\n  providers: [\n    { provide: 'BASE_URL', useFactory: getBaseUrl }\n  ] \n})\nexport class TwoPhaseTransformersModule { }\n\nexport function getBaseUrl() {\n  return document.getElementsByTagName('base')[0].href;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+data/twophasetransformers/twophasetransformers.module.ts"],"sourceRoot":"webpack:///"}